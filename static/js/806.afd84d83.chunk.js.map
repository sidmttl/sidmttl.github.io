{"version":3,"file":"static/js/806.afd84d83.chunk.js","mappings":"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","sources":["../node_modules/remark-breaks/node_modules/unist-util-is/lib/index.js","../node_modules/remark-breaks/node_modules/unist-util-visit-parents/lib/index.js","../node_modules/remark-breaks/node_modules/unist-util-visit/lib/index.js","../node_modules/remark-breaks/index.js","pages/blogs/Blog1.js"],"sourcesContent":["/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */\n\n/**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */\n\n/**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convert =\n  /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    return Boolean(\n      node &&\n        typeof node === 'object' &&\n        'type' in node &&\n        // @ts-expect-error: fine.\n        Boolean(check.call(this, node, ...parameters))\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {boolean | 'skip'} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<Ancestor>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   Tree type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor<Node>} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, undefined, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number | undefined} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = node && typeof node === 'object' ? node : {}\n\n        if (typeof value.type === 'string') {\n          const name =\n            // `hast`\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : // `xast`\n              typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Check if `Child` can be a child of `Ancestor`.\n *\n * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns\n * `never`.\n *\n * @template {Node} Ancestor\n *   Node type.\n * @template {Node} Child\n *   Node type.\n * @typedef {(\n *   Ancestor extends Parent\n *     ? Child extends Ancestor['children'][number]\n *       ? Ancestor\n *       : never\n *     : never\n * )} ParentsOf\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends Node ? number | null : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends Node ? Ancestor | null : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * Build a typed `Visitor` function from a node and all possible parents.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Visited\n *   Node type.\n * @template {Parent} Ancestor\n *   Parent type.\n * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch\n */\n\n/**\n * Build a typed `Visitor` function from a list of descendants and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,\n *     Extract<Descendant, Parent>\n *   >\n * )} BuildVisitorFromDescendants\n */\n\n/**\n * Build a typed `Visitor` function from a tree and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} [Tree=Node]\n *   Node type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n */\n\nimport {visit} from 'unist-util-visit'\n\nconst find = /[\\t ]*(?:\\r?\\n|\\r)/g\n\n/**\n * Plugin to support hard breaks without needing spaces or escapes (turns enters\n * into `<br>`s).\n *\n * @type {import('unified').Plugin<void[], Root>}\n */\nexport default function remarkBreaks() {\n  return (tree) => {\n    visit(tree, 'text', (node, index, parent) => {\n      /** @type {PhrasingContent[]} */\n      const result = []\n      let start = 0\n\n      find.lastIndex = 0\n\n      let match = find.exec(node.value)\n\n      while (match) {\n        const position = match.index\n\n        if (start !== position) {\n          result.push({type: 'text', value: node.value.slice(start, position)})\n        }\n\n        result.push({type: 'break'})\n        start = position + match[0].length\n        match = find.exec(node.value)\n      }\n\n      if (result.length > 0 && parent && typeof index === 'number') {\n        if (start < node.value.length) {\n          result.push({type: 'text', value: node.value.slice(start)})\n        }\n\n        parent.children.splice(index, 1, ...result)\n        return index + result.length\n      }\n    })\n  }\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport ReactMarkdown from 'react-markdown';\nimport raw from 'raw.macro';\nimport remarkBreaks from 'remark-breaks';\n// import rehypeRaw from 'rehype-raw';\n\nimport Main from '../../layouts/Main';\n\n// uses babel to load contents of file\nconst markdown = raw('../../data/blogs/blog1.md');\n\nconst count = markdown.split(/\\s+/)\n  .map((s) => s.replace(/\\W/g, ''))\n  .filter((s) => s.length).length;\n\n// Make all hrefs react router links\nconst LinkRenderer = ({ ...children }) => <Link {...children} />;\n\nconst Blog1 = () => (\n  <Main\n    title=\"About\"\n    description=\"Learn about Siddharth Mittal\"\n  >\n    <article className=\"post markdown\" id=\"about\">\n      <header>\n        <div className=\"title\">\n          <h2 data-testid=\"heading\"><Link to=\"/blog/blog1\">BOOK: HIT REFRESH</Link></h2>\n          <p>(in about {count} words)</p>\n        </div>\n      </header>\n      <ReactMarkdown\n        remarkPlugins={[remarkBreaks]}\n        // rehypePlugins={[rehypeRaw]}\n        renderers={{\n          Link: LinkRenderer,\n        }}\n      >\n        {markdown}\n      </ReactMarkdown>\n    </article>\n  </Main>\n);\n\nexport default Blog1;\n"],"names":["convert","test","undefined","ok","check","castFactory","type","node","typeFactory","Array","isArray","anyFactory","all","key","propsFactory","Error","tests","checks","index","length","parameters","call","this","Boolean","visitParents","tree","visitor","reverse","is","step","factory","parents","value","name","tagName","Object","defineProperty","visit","subresult","offset","grandparents","result","toResult","children","concat","find","remarkBreaks","parent","indexOf","start","lastIndex","match","exec","position","push","slice","splice","markdown","count","split","map","s","replace","filter","LinkRenderer","Main","title","description","className","id","to","remarkPlugins","renderers","Link"],"sourceRoot":""}